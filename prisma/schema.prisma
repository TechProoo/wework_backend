generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  COMPANY
  ADMIN
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum JobStatus {
  OPEN
  CLOSED
  FILLED
}

enum ApplicationStatus {
  APPLIED
  REVIEWING
  INTERVIEW
  OFFERED
  REJECTED
}

model User {
  id                 String   @id @default(cuid())
  email              String   @unique
  passwordHash       String
  firstName          String?
  lastName           String?
  avatar             String?
  bio                String?
  role               Role     @default(STUDENT)
  isVerified         Boolean  @default(false)
  verificationToken  String?
  passwordResetToken String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Student fields
  university     String?
  major          String?
  graduationYear String?

  // Company relation (if this user belongs to a company)
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  // Relations
  enrollments   Enrollment[]
  reviews       Review[]
  payments      Payment[]
  applications  Application[]
}

model Company {
  id          String   @id @default(cuid())
  companyName String   @unique
  slug        String   @unique
  industry    String?
  email       String   @unique
  website     String?
  companySize String?
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  jobs      Job[]
  employees User[]
}

model Course {
  id          String   @id @default(cuid())
  title       String
  category    String
  level       String
  duration    String
  students    Int      @default(0)
  rating      Float    @default(0)
  price       Float
  thumbnail   String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  enrollments Enrollment[]
  lessons     Lesson[]
  reviews     Review[]
}

model Lesson {
  id         String  @id @default(cuid())
  courseId   String
  title      String
  duration   String
  isPreview  Boolean @default(false)
  contentUrl String?
  order      Int     @default(0)

  course Course @relation(fields: [courseId], references: [id])
}

model Enrollment {
  id        String           @id @default(cuid())
  userId    String
  courseId  String
  status    EnrollmentStatus @default(ACTIVE)
  pricePaid Float?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user    User     @relation(fields: [userId], references: [id])
  course  Course   @relation(fields: [courseId], references: [id])
  payment Payment?
}

model Payment {
  id                String        @id @default(cuid())
  userId            String
  amount            Float
  currency          String        @default("NGN")
  provider          String?
  providerPaymentId String?
  status            PaymentStatus @default(PENDING)
  metadata          Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user         User        @relation(fields: [userId], references: [id])
  enrollment   Enrollment? @relation(fields: [enrollmentId], references: [id])
  enrollmentId String?     @unique
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model Job {
  id           String    @id @default(cuid())
  companyId    String
  title        String
  location     String?
  remote       Boolean   @default(false)
  description  String
  requirements String[]
  salaryRange  String?
  status       JobStatus @default(OPEN)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  company      Company       @relation(fields: [companyId], references: [id])
  applications Application[]
}

model Application {
  id          String            @id @default(cuid())
  applicantId String
  jobId       String
  status      ApplicationStatus @default(APPLIED)
  resumeUrl   String?
  coverLetter String?
  createdAt   DateTime          @default(now())

  applicant User @relation(fields: [applicantId], references: [id])
  job       Job  @relation(fields: [jobId], references: [id])
}

